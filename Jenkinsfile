pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'countries-capitals-app'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üì• –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∏–∑ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è'
                bat 'dir'
            }
        }
        
        stage('Validate Files') {
            steps {
                echo 'üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤...'
                bat '''
                    echo –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏:
                    dir
                    echo.
                    echo –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã:
                    if exist Capital_Country.py (echo ‚úÖ Capital_Country.py –Ω–∞–π–¥–µ–Ω) else (echo ‚ùå Capital_Country.py –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
                    if exist Dockerfile (echo ‚úÖ Dockerfile –Ω–∞–π–¥–µ–Ω) else (echo ‚ùå Dockerfile –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
                    if exist requirements.txt (echo ‚úÖ requirements.txt –Ω–∞–π–¥–µ–Ω) else (echo ‚ùå requirements.txt –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
                '''
            }
        }
        
        stage('Test Python Code') {
            steps {
                echo 'üêç –¢–µ—Å—Ç–∏—Ä—É–µ–º Python –∫–æ–¥...'
                script {
                    try {
                        bat 'python --version'
                        bat 'python -m py_compile Capital_Country.py'
                        echo '‚úÖ Python –∫–æ–¥ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫'
                    } catch (e) {
                        echo '‚ö†Ô∏è Python –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏'
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑...'
                script {
                    try {
                        bat 'docker --version'
                        bat 'docker build -t %DOCKER_IMAGE% .'
                        echo '‚úÖ Docker –æ–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω'
                    } catch (e) {
                        echo '‚ö†Ô∏è Docker –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É'
                    }
                }
            }
        }
        
        stage('Success') {
            steps {
                echo 'üéâ CI –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!'
                bat 'echo –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã'
            }
        }
    }
    
    post {
        always {
            echo 'üìã –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
            bat 'docker images | find "%DOCKER_IMAGE%" || echo Docker –æ–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }
    }
}
